//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace schiessbuch {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("siusclubDataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class siusclubDataSet1 : global::System.Data.DataSet {
        
        private uebersichtgemeindemeisterschaftDataTable tableuebersichtgemeindemeisterschaft;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public siusclubDataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected siusclubDataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["uebersichtgemeindemeisterschaft"] != null)) {
                    base.Tables.Add(new uebersichtgemeindemeisterschaftDataTable(ds.Tables["uebersichtgemeindemeisterschaft"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public uebersichtgemeindemeisterschaftDataTable uebersichtgemeindemeisterschaft {
            get {
                return this.tableuebersichtgemeindemeisterschaft;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            siusclubDataSet1 cln = ((siusclubDataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["uebersichtgemeindemeisterschaft"] != null)) {
                    base.Tables.Add(new uebersichtgemeindemeisterschaftDataTable(ds.Tables["uebersichtgemeindemeisterschaft"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableuebersichtgemeindemeisterschaft = ((uebersichtgemeindemeisterschaftDataTable)(base.Tables["uebersichtgemeindemeisterschaft"]));
            if ((initTable == true)) {
                if ((this.tableuebersichtgemeindemeisterschaft != null)) {
                    this.tableuebersichtgemeindemeisterschaft.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "siusclubDataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/siusclubDataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableuebersichtgemeindemeisterschaft = new uebersichtgemeindemeisterschaftDataTable();
            base.Tables.Add(this.tableuebersichtgemeindemeisterschaft);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeuebersichtgemeindemeisterschaft() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            siusclubDataSet1 ds = new siusclubDataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void uebersichtgemeindemeisterschaftRowChangeEventHandler(object sender, uebersichtgemeindemeisterschaftRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class uebersichtgemeindemeisterschaftDataTable : global::System.Data.TypedTableBase<uebersichtgemeindemeisterschaftRow> {
            
            private global::System.Data.DataColumn columnVerein;
            
            private global::System.Data.DataColumn columnSchuetzeID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnVorname;
            
            private global::System.Data.DataColumn columnKlasse;
            
            private global::System.Data.DataColumn columnDatum;
            
            private global::System.Data.DataColumn columnGemeindemeister_Luftgewehr;
            
            private global::System.Data.DataColumn columnGemeindemeister_Luftpistole;
            
            private global::System.Data.DataColumn columnGemeindemeister_Luftgewehr_Auflage;
            
            private global::System.Data.DataColumn columnGemeindemeister_Luftpistole_Auflage;
            
            private global::System.Data.DataColumn columnPreis_Luftgewehr;
            
            private global::System.Data.DataColumn columnPreis_Luftpistole;
            
            private global::System.Data.DataColumn columnPreis_Luftgewehr_Auflage;
            
            private global::System.Data.DataColumn columnPreis_Luftpistole_Auflage;
            
            private global::System.Data.DataColumn columnBuergermeisterpokal_Luftgewehr;
            
            private global::System.Data.DataColumn columnBuergermeisterpokal_Luftpistole;
            
            private global::System.Data.DataColumn columnBuergermeisterpokal_Luftgewehr_Auflage;
            
            private global::System.Data.DataColumn columnBuergermeisterpokal_Luftpistole_Auflage;
            
            private global::System.Data.DataColumn columnGedaechtnispokal_Luftgewehr;
            
            private global::System.Data.DataColumn columnGedaechtnispokal_Luftpistole;
            
            private global::System.Data.DataColumn columnGedaechtnispokal_Luftgewehr_Auflage;
            
            private global::System.Data.DataColumn columnGedaechtnispokal_Luftpistole_Auflage;
            
            private global::System.Data.DataColumn columnschiessjahrId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public uebersichtgemeindemeisterschaftDataTable() {
                this.TableName = "uebersichtgemeindemeisterschaft";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal uebersichtgemeindemeisterschaftDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected uebersichtgemeindemeisterschaftDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VereinColumn {
                get {
                    return this.columnVerein;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SchuetzeIDColumn {
                get {
                    return this.columnSchuetzeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn VornameColumn {
                get {
                    return this.columnVorname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn KlasseColumn {
                get {
                    return this.columnKlasse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DatumColumn {
                get {
                    return this.columnDatum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Gemeindemeister_LuftgewehrColumn {
                get {
                    return this.columnGemeindemeister_Luftgewehr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Gemeindemeister_LuftpistoleColumn {
                get {
                    return this.columnGemeindemeister_Luftpistole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Gemeindemeister_Luftgewehr_AuflageColumn {
                get {
                    return this.columnGemeindemeister_Luftgewehr_Auflage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Gemeindemeister_Luftpistole_AuflageColumn {
                get {
                    return this.columnGemeindemeister_Luftpistole_Auflage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Preis_LuftgewehrColumn {
                get {
                    return this.columnPreis_Luftgewehr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Preis_LuftpistoleColumn {
                get {
                    return this.columnPreis_Luftpistole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Preis_Luftgewehr_AuflageColumn {
                get {
                    return this.columnPreis_Luftgewehr_Auflage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Preis_Luftpistole_AuflageColumn {
                get {
                    return this.columnPreis_Luftpistole_Auflage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Buergermeisterpokal_LuftgewehrColumn {
                get {
                    return this.columnBuergermeisterpokal_Luftgewehr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Buergermeisterpokal_LuftpistoleColumn {
                get {
                    return this.columnBuergermeisterpokal_Luftpistole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Buergermeisterpokal_Luftgewehr_AuflageColumn {
                get {
                    return this.columnBuergermeisterpokal_Luftgewehr_Auflage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Buergermeisterpokal_Luftpistole_AuflageColumn {
                get {
                    return this.columnBuergermeisterpokal_Luftpistole_Auflage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Gedaechtnispokal_LuftgewehrColumn {
                get {
                    return this.columnGedaechtnispokal_Luftgewehr;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Gedaechtnispokal_LuftpistoleColumn {
                get {
                    return this.columnGedaechtnispokal_Luftpistole;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Gedaechtnispokal_Luftgewehr_AuflageColumn {
                get {
                    return this.columnGedaechtnispokal_Luftgewehr_Auflage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Gedaechtnispokal_Luftpistole_AuflageColumn {
                get {
                    return this.columnGedaechtnispokal_Luftpistole_Auflage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn schiessjahrIdColumn {
                get {
                    return this.columnschiessjahrId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public uebersichtgemeindemeisterschaftRow this[int index] {
                get {
                    return ((uebersichtgemeindemeisterschaftRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event uebersichtgemeindemeisterschaftRowChangeEventHandler uebersichtgemeindemeisterschaftRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event uebersichtgemeindemeisterschaftRowChangeEventHandler uebersichtgemeindemeisterschaftRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event uebersichtgemeindemeisterschaftRowChangeEventHandler uebersichtgemeindemeisterschaftRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event uebersichtgemeindemeisterschaftRowChangeEventHandler uebersichtgemeindemeisterschaftRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AdduebersichtgemeindemeisterschaftRow(uebersichtgemeindemeisterschaftRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public uebersichtgemeindemeisterschaftRow AdduebersichtgemeindemeisterschaftRow(
                        string Verein, 
                        string Name, 
                        string Vorname, 
                        string Klasse, 
                        System.DateTime Datum, 
                        int Gemeindemeister_Luftgewehr, 
                        int Gemeindemeister_Luftpistole, 
                        int Gemeindemeister_Luftgewehr_Auflage, 
                        int Gemeindemeister_Luftpistole_Auflage, 
                        int Preis_Luftgewehr, 
                        int Preis_Luftpistole, 
                        int Preis_Luftgewehr_Auflage, 
                        int Preis_Luftpistole_Auflage, 
                        int Buergermeisterpokal_Luftgewehr, 
                        int Buergermeisterpokal_Luftpistole, 
                        int Buergermeisterpokal_Luftgewehr_Auflage, 
                        int Buergermeisterpokal_Luftpistole_Auflage, 
                        int Gedaechtnispokal_Luftgewehr, 
                        int Gedaechtnispokal_Luftpistole, 
                        int Gedaechtnispokal_Luftgewehr_Auflage, 
                        int Gedaechtnispokal_Luftpistole_Auflage, 
                        uint schiessjahrId) {
                uebersichtgemeindemeisterschaftRow rowuebersichtgemeindemeisterschaftRow = ((uebersichtgemeindemeisterschaftRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Verein,
                        null,
                        Name,
                        Vorname,
                        Klasse,
                        Datum,
                        Gemeindemeister_Luftgewehr,
                        Gemeindemeister_Luftpistole,
                        Gemeindemeister_Luftgewehr_Auflage,
                        Gemeindemeister_Luftpistole_Auflage,
                        Preis_Luftgewehr,
                        Preis_Luftpistole,
                        Preis_Luftgewehr_Auflage,
                        Preis_Luftpistole_Auflage,
                        Buergermeisterpokal_Luftgewehr,
                        Buergermeisterpokal_Luftpistole,
                        Buergermeisterpokal_Luftgewehr_Auflage,
                        Buergermeisterpokal_Luftpistole_Auflage,
                        Gedaechtnispokal_Luftgewehr,
                        Gedaechtnispokal_Luftpistole,
                        Gedaechtnispokal_Luftgewehr_Auflage,
                        Gedaechtnispokal_Luftpistole_Auflage,
                        schiessjahrId};
                rowuebersichtgemeindemeisterschaftRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowuebersichtgemeindemeisterschaftRow);
                return rowuebersichtgemeindemeisterschaftRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public uebersichtgemeindemeisterschaftRow FindBySchuetzeIDschiessjahrId(int SchuetzeID, uint schiessjahrId) {
                return ((uebersichtgemeindemeisterschaftRow)(this.Rows.Find(new object[] {
                            SchuetzeID,
                            schiessjahrId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                uebersichtgemeindemeisterschaftDataTable cln = ((uebersichtgemeindemeisterschaftDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new uebersichtgemeindemeisterschaftDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnVerein = base.Columns["Verein"];
                this.columnSchuetzeID = base.Columns["SchuetzeID"];
                this.columnName = base.Columns["Name"];
                this.columnVorname = base.Columns["Vorname"];
                this.columnKlasse = base.Columns["Klasse"];
                this.columnDatum = base.Columns["Datum"];
                this.columnGemeindemeister_Luftgewehr = base.Columns["Gemeindemeister Luftgewehr"];
                this.columnGemeindemeister_Luftpistole = base.Columns["Gemeindemeister Luftpistole"];
                this.columnGemeindemeister_Luftgewehr_Auflage = base.Columns["Gemeindemeister Luftgewehr Auflage"];
                this.columnGemeindemeister_Luftpistole_Auflage = base.Columns["Gemeindemeister Luftpistole Auflage"];
                this.columnPreis_Luftgewehr = base.Columns["Preis Luftgewehr"];
                this.columnPreis_Luftpistole = base.Columns["Preis Luftpistole"];
                this.columnPreis_Luftgewehr_Auflage = base.Columns["Preis Luftgewehr Auflage"];
                this.columnPreis_Luftpistole_Auflage = base.Columns["Preis Luftpistole Auflage"];
                this.columnBuergermeisterpokal_Luftgewehr = base.Columns["Buergermeisterpokal Luftgewehr"];
                this.columnBuergermeisterpokal_Luftpistole = base.Columns["Buergermeisterpokal Luftpistole"];
                this.columnBuergermeisterpokal_Luftgewehr_Auflage = base.Columns["Buergermeisterpokal Luftgewehr Auflage"];
                this.columnBuergermeisterpokal_Luftpistole_Auflage = base.Columns["Buergermeisterpokal Luftpistole Auflage"];
                this.columnGedaechtnispokal_Luftgewehr = base.Columns["Gedaechtnispokal Luftgewehr"];
                this.columnGedaechtnispokal_Luftpistole = base.Columns["Gedaechtnispokal Luftpistole"];
                this.columnGedaechtnispokal_Luftgewehr_Auflage = base.Columns["Gedaechtnispokal Luftgewehr Auflage"];
                this.columnGedaechtnispokal_Luftpistole_Auflage = base.Columns["Gedaechtnispokal Luftpistole Auflage"];
                this.columnschiessjahrId = base.Columns["schiessjahrId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnVerein = new global::System.Data.DataColumn("Verein", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVerein);
                this.columnSchuetzeID = new global::System.Data.DataColumn("SchuetzeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchuetzeID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnVorname = new global::System.Data.DataColumn("Vorname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVorname);
                this.columnKlasse = new global::System.Data.DataColumn("Klasse", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKlasse);
                this.columnDatum = new global::System.Data.DataColumn("Datum", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDatum);
                this.columnGemeindemeister_Luftgewehr = new global::System.Data.DataColumn("Gemeindemeister Luftgewehr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGemeindemeister_Luftgewehr);
                this.columnGemeindemeister_Luftpistole = new global::System.Data.DataColumn("Gemeindemeister Luftpistole", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGemeindemeister_Luftpistole);
                this.columnGemeindemeister_Luftgewehr_Auflage = new global::System.Data.DataColumn("Gemeindemeister Luftgewehr Auflage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGemeindemeister_Luftgewehr_Auflage);
                this.columnGemeindemeister_Luftpistole_Auflage = new global::System.Data.DataColumn("Gemeindemeister Luftpistole Auflage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGemeindemeister_Luftpistole_Auflage);
                this.columnPreis_Luftgewehr = new global::System.Data.DataColumn("Preis Luftgewehr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreis_Luftgewehr);
                this.columnPreis_Luftpistole = new global::System.Data.DataColumn("Preis Luftpistole", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreis_Luftpistole);
                this.columnPreis_Luftgewehr_Auflage = new global::System.Data.DataColumn("Preis Luftgewehr Auflage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreis_Luftgewehr_Auflage);
                this.columnPreis_Luftpistole_Auflage = new global::System.Data.DataColumn("Preis Luftpistole Auflage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPreis_Luftpistole_Auflage);
                this.columnBuergermeisterpokal_Luftgewehr = new global::System.Data.DataColumn("Buergermeisterpokal Luftgewehr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuergermeisterpokal_Luftgewehr);
                this.columnBuergermeisterpokal_Luftpistole = new global::System.Data.DataColumn("Buergermeisterpokal Luftpistole", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuergermeisterpokal_Luftpistole);
                this.columnBuergermeisterpokal_Luftgewehr_Auflage = new global::System.Data.DataColumn("Buergermeisterpokal Luftgewehr Auflage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuergermeisterpokal_Luftgewehr_Auflage);
                this.columnBuergermeisterpokal_Luftpistole_Auflage = new global::System.Data.DataColumn("Buergermeisterpokal Luftpistole Auflage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuergermeisterpokal_Luftpistole_Auflage);
                this.columnGedaechtnispokal_Luftgewehr = new global::System.Data.DataColumn("Gedaechtnispokal Luftgewehr", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGedaechtnispokal_Luftgewehr);
                this.columnGedaechtnispokal_Luftpistole = new global::System.Data.DataColumn("Gedaechtnispokal Luftpistole", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGedaechtnispokal_Luftpistole);
                this.columnGedaechtnispokal_Luftgewehr_Auflage = new global::System.Data.DataColumn("Gedaechtnispokal Luftgewehr Auflage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGedaechtnispokal_Luftgewehr_Auflage);
                this.columnGedaechtnispokal_Luftpistole_Auflage = new global::System.Data.DataColumn("Gedaechtnispokal Luftpistole Auflage", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGedaechtnispokal_Luftpistole_Auflage);
                this.columnschiessjahrId = new global::System.Data.DataColumn("schiessjahrId", typeof(uint), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnschiessjahrId);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSchuetzeID,
                                this.columnschiessjahrId}, true));
                this.columnVerein.MaxLength = 255;
                this.columnSchuetzeID.AutoIncrement = true;
                this.columnSchuetzeID.AutoIncrementSeed = -1;
                this.columnSchuetzeID.AutoIncrementStep = -1;
                this.columnSchuetzeID.AllowDBNull = false;
                this.columnName.MaxLength = 255;
                this.columnVorname.MaxLength = 255;
                this.columnKlasse.MaxLength = 45;
                this.columnDatum.AllowDBNull = false;
                this.columnschiessjahrId.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public uebersichtgemeindemeisterschaftRow NewuebersichtgemeindemeisterschaftRow() {
                return ((uebersichtgemeindemeisterschaftRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new uebersichtgemeindemeisterschaftRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(uebersichtgemeindemeisterschaftRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.uebersichtgemeindemeisterschaftRowChanged != null)) {
                    this.uebersichtgemeindemeisterschaftRowChanged(this, new uebersichtgemeindemeisterschaftRowChangeEvent(((uebersichtgemeindemeisterschaftRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.uebersichtgemeindemeisterschaftRowChanging != null)) {
                    this.uebersichtgemeindemeisterschaftRowChanging(this, new uebersichtgemeindemeisterschaftRowChangeEvent(((uebersichtgemeindemeisterschaftRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.uebersichtgemeindemeisterschaftRowDeleted != null)) {
                    this.uebersichtgemeindemeisterschaftRowDeleted(this, new uebersichtgemeindemeisterschaftRowChangeEvent(((uebersichtgemeindemeisterschaftRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.uebersichtgemeindemeisterschaftRowDeleting != null)) {
                    this.uebersichtgemeindemeisterschaftRowDeleting(this, new uebersichtgemeindemeisterschaftRowChangeEvent(((uebersichtgemeindemeisterschaftRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveuebersichtgemeindemeisterschaftRow(uebersichtgemeindemeisterschaftRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                siusclubDataSet1 ds = new siusclubDataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "uebersichtgemeindemeisterschaftDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class uebersichtgemeindemeisterschaftRow : global::System.Data.DataRow {
            
            private uebersichtgemeindemeisterschaftDataTable tableuebersichtgemeindemeisterschaft;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal uebersichtgemeindemeisterschaftRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableuebersichtgemeindemeisterschaft = ((uebersichtgemeindemeisterschaftDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Verein {
                get {
                    try {
                        return ((string)(this[this.tableuebersichtgemeindemeisterschaft.VereinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Verein in Tabelle uebersichtgemeindemeisterschaft ist DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.VereinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int SchuetzeID {
                get {
                    return ((int)(this[this.tableuebersichtgemeindemeisterschaft.SchuetzeIDColumn]));
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.SchuetzeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableuebersichtgemeindemeisterschaft.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Name in Tabelle uebersichtgemeindemeisterschaft ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Vorname {
                get {
                    try {
                        return ((string)(this[this.tableuebersichtgemeindemeisterschaft.VornameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Vorname in Tabelle uebersichtgemeindemeisterschaft ist DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.VornameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Klasse {
                get {
                    try {
                        return ((string)(this[this.tableuebersichtgemeindemeisterschaft.KlasseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Klasse in Tabelle uebersichtgemeindemeisterschaft ist DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.KlasseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime Datum {
                get {
                    return ((global::System.DateTime)(this[this.tableuebersichtgemeindemeisterschaft.DatumColumn]));
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.DatumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Gemeindemeister_Luftgewehr {
                get {
                    try {
                        return ((int)(this[this.tableuebersichtgemeindemeisterschaft.Gemeindemeister_LuftgewehrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Gemeindemeister Luftgewehr in Tabelle uebersichtgemeindemeist" +
                                "erschaft ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.Gemeindemeister_LuftgewehrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Gemeindemeister_Luftpistole {
                get {
                    try {
                        return ((int)(this[this.tableuebersichtgemeindemeisterschaft.Gemeindemeister_LuftpistoleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Gemeindemeister Luftpistole in Tabelle uebersichtgemeindemeis" +
                                "terschaft ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.Gemeindemeister_LuftpistoleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Gemeindemeister_Luftgewehr_Auflage {
                get {
                    try {
                        return ((int)(this[this.tableuebersichtgemeindemeisterschaft.Gemeindemeister_Luftgewehr_AuflageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Gemeindemeister Luftgewehr Auflage in Tabelle uebersichtgemei" +
                                "ndemeisterschaft ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.Gemeindemeister_Luftgewehr_AuflageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Gemeindemeister_Luftpistole_Auflage {
                get {
                    try {
                        return ((int)(this[this.tableuebersichtgemeindemeisterschaft.Gemeindemeister_Luftpistole_AuflageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Gemeindemeister Luftpistole Auflage in Tabelle uebersichtgeme" +
                                "indemeisterschaft ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.Gemeindemeister_Luftpistole_AuflageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Preis_Luftgewehr {
                get {
                    try {
                        return ((int)(this[this.tableuebersichtgemeindemeisterschaft.Preis_LuftgewehrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Preis Luftgewehr in Tabelle uebersichtgemeindemeisterschaft i" +
                                "st DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.Preis_LuftgewehrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Preis_Luftpistole {
                get {
                    try {
                        return ((int)(this[this.tableuebersichtgemeindemeisterschaft.Preis_LuftpistoleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Preis Luftpistole in Tabelle uebersichtgemeindemeisterschaft " +
                                "ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.Preis_LuftpistoleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Preis_Luftgewehr_Auflage {
                get {
                    try {
                        return ((int)(this[this.tableuebersichtgemeindemeisterschaft.Preis_Luftgewehr_AuflageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Preis Luftgewehr Auflage in Tabelle uebersichtgemeindemeister" +
                                "schaft ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.Preis_Luftgewehr_AuflageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Preis_Luftpistole_Auflage {
                get {
                    try {
                        return ((int)(this[this.tableuebersichtgemeindemeisterschaft.Preis_Luftpistole_AuflageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Preis Luftpistole Auflage in Tabelle uebersichtgemeindemeiste" +
                                "rschaft ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.Preis_Luftpistole_AuflageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Buergermeisterpokal_Luftgewehr {
                get {
                    try {
                        return ((int)(this[this.tableuebersichtgemeindemeisterschaft.Buergermeisterpokal_LuftgewehrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Buergermeisterpokal Luftgewehr in Tabelle uebersichtgemeindem" +
                                "eisterschaft ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.Buergermeisterpokal_LuftgewehrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Buergermeisterpokal_Luftpistole {
                get {
                    try {
                        return ((int)(this[this.tableuebersichtgemeindemeisterschaft.Buergermeisterpokal_LuftpistoleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Buergermeisterpokal Luftpistole in Tabelle uebersichtgemeinde" +
                                "meisterschaft ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.Buergermeisterpokal_LuftpistoleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Buergermeisterpokal_Luftgewehr_Auflage {
                get {
                    try {
                        return ((int)(this[this.tableuebersichtgemeindemeisterschaft.Buergermeisterpokal_Luftgewehr_AuflageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Buergermeisterpokal Luftgewehr Auflage in Tabelle uebersichtg" +
                                "emeindemeisterschaft ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.Buergermeisterpokal_Luftgewehr_AuflageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Buergermeisterpokal_Luftpistole_Auflage {
                get {
                    try {
                        return ((int)(this[this.tableuebersichtgemeindemeisterschaft.Buergermeisterpokal_Luftpistole_AuflageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Buergermeisterpokal Luftpistole Auflage in Tabelle uebersicht" +
                                "gemeindemeisterschaft ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.Buergermeisterpokal_Luftpistole_AuflageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Gedaechtnispokal_Luftgewehr {
                get {
                    try {
                        return ((int)(this[this.tableuebersichtgemeindemeisterschaft.Gedaechtnispokal_LuftgewehrColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Gedaechtnispokal Luftgewehr in Tabelle uebersichtgemeindemeis" +
                                "terschaft ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.Gedaechtnispokal_LuftgewehrColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Gedaechtnispokal_Luftpistole {
                get {
                    try {
                        return ((int)(this[this.tableuebersichtgemeindemeisterschaft.Gedaechtnispokal_LuftpistoleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Gedaechtnispokal Luftpistole in Tabelle uebersichtgemeindemei" +
                                "sterschaft ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.Gedaechtnispokal_LuftpistoleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Gedaechtnispokal_Luftgewehr_Auflage {
                get {
                    try {
                        return ((int)(this[this.tableuebersichtgemeindemeisterschaft.Gedaechtnispokal_Luftgewehr_AuflageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Gedaechtnispokal Luftgewehr Auflage in Tabelle uebersichtgeme" +
                                "indemeisterschaft ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.Gedaechtnispokal_Luftgewehr_AuflageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Gedaechtnispokal_Luftpistole_Auflage {
                get {
                    try {
                        return ((int)(this[this.tableuebersichtgemeindemeisterschaft.Gedaechtnispokal_Luftpistole_AuflageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Der Wert für Spalte Gedaechtnispokal Luftpistole Auflage in Tabelle uebersichtgem" +
                                "eindemeisterschaft ist DBNull.", e);
                    }
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.Gedaechtnispokal_Luftpistole_AuflageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public uint schiessjahrId {
                get {
                    return ((uint)(this[this.tableuebersichtgemeindemeisterschaft.schiessjahrIdColumn]));
                }
                set {
                    this[this.tableuebersichtgemeindemeisterschaft.schiessjahrIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVereinNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.VereinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVereinNull() {
                this[this.tableuebersichtgemeindemeisterschaft.VereinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNameNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNameNull() {
                this[this.tableuebersichtgemeindemeisterschaft.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsVornameNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.VornameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetVornameNull() {
                this[this.tableuebersichtgemeindemeisterschaft.VornameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsKlasseNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.KlasseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetKlasseNull() {
                this[this.tableuebersichtgemeindemeisterschaft.KlasseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGemeindemeister_LuftgewehrNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.Gemeindemeister_LuftgewehrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGemeindemeister_LuftgewehrNull() {
                this[this.tableuebersichtgemeindemeisterschaft.Gemeindemeister_LuftgewehrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGemeindemeister_LuftpistoleNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.Gemeindemeister_LuftpistoleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGemeindemeister_LuftpistoleNull() {
                this[this.tableuebersichtgemeindemeisterschaft.Gemeindemeister_LuftpistoleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGemeindemeister_Luftgewehr_AuflageNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.Gemeindemeister_Luftgewehr_AuflageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGemeindemeister_Luftgewehr_AuflageNull() {
                this[this.tableuebersichtgemeindemeisterschaft.Gemeindemeister_Luftgewehr_AuflageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGemeindemeister_Luftpistole_AuflageNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.Gemeindemeister_Luftpistole_AuflageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGemeindemeister_Luftpistole_AuflageNull() {
                this[this.tableuebersichtgemeindemeisterschaft.Gemeindemeister_Luftpistole_AuflageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPreis_LuftgewehrNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.Preis_LuftgewehrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPreis_LuftgewehrNull() {
                this[this.tableuebersichtgemeindemeisterschaft.Preis_LuftgewehrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPreis_LuftpistoleNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.Preis_LuftpistoleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPreis_LuftpistoleNull() {
                this[this.tableuebersichtgemeindemeisterschaft.Preis_LuftpistoleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPreis_Luftgewehr_AuflageNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.Preis_Luftgewehr_AuflageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPreis_Luftgewehr_AuflageNull() {
                this[this.tableuebersichtgemeindemeisterschaft.Preis_Luftgewehr_AuflageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPreis_Luftpistole_AuflageNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.Preis_Luftpistole_AuflageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPreis_Luftpistole_AuflageNull() {
                this[this.tableuebersichtgemeindemeisterschaft.Preis_Luftpistole_AuflageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBuergermeisterpokal_LuftgewehrNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.Buergermeisterpokal_LuftgewehrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBuergermeisterpokal_LuftgewehrNull() {
                this[this.tableuebersichtgemeindemeisterschaft.Buergermeisterpokal_LuftgewehrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBuergermeisterpokal_LuftpistoleNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.Buergermeisterpokal_LuftpistoleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBuergermeisterpokal_LuftpistoleNull() {
                this[this.tableuebersichtgemeindemeisterschaft.Buergermeisterpokal_LuftpistoleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBuergermeisterpokal_Luftgewehr_AuflageNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.Buergermeisterpokal_Luftgewehr_AuflageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBuergermeisterpokal_Luftgewehr_AuflageNull() {
                this[this.tableuebersichtgemeindemeisterschaft.Buergermeisterpokal_Luftgewehr_AuflageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsBuergermeisterpokal_Luftpistole_AuflageNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.Buergermeisterpokal_Luftpistole_AuflageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetBuergermeisterpokal_Luftpistole_AuflageNull() {
                this[this.tableuebersichtgemeindemeisterschaft.Buergermeisterpokal_Luftpistole_AuflageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGedaechtnispokal_LuftgewehrNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.Gedaechtnispokal_LuftgewehrColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGedaechtnispokal_LuftgewehrNull() {
                this[this.tableuebersichtgemeindemeisterschaft.Gedaechtnispokal_LuftgewehrColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGedaechtnispokal_LuftpistoleNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.Gedaechtnispokal_LuftpistoleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGedaechtnispokal_LuftpistoleNull() {
                this[this.tableuebersichtgemeindemeisterschaft.Gedaechtnispokal_LuftpistoleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGedaechtnispokal_Luftgewehr_AuflageNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.Gedaechtnispokal_Luftgewehr_AuflageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGedaechtnispokal_Luftgewehr_AuflageNull() {
                this[this.tableuebersichtgemeindemeisterschaft.Gedaechtnispokal_Luftgewehr_AuflageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGedaechtnispokal_Luftpistole_AuflageNull() {
                return this.IsNull(this.tableuebersichtgemeindemeisterschaft.Gedaechtnispokal_Luftpistole_AuflageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGedaechtnispokal_Luftpistole_AuflageNull() {
                this[this.tableuebersichtgemeindemeisterschaft.Gedaechtnispokal_Luftpistole_AuflageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class uebersichtgemeindemeisterschaftRowChangeEvent : global::System.EventArgs {
            
            private uebersichtgemeindemeisterschaftRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public uebersichtgemeindemeisterschaftRowChangeEvent(uebersichtgemeindemeisterschaftRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public uebersichtgemeindemeisterschaftRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace schiessbuch.siusclubDataSet1TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class uebersichtgemeindemeisterschaftTableAdapter : global::System.ComponentModel.Component {
        
        private global::MySql.Data.MySqlClient.MySqlDataAdapter _adapter;
        
        private global::MySql.Data.MySqlClient.MySqlConnection _connection;
        
        private global::MySql.Data.MySqlClient.MySqlTransaction _transaction;
        
        private global::MySql.Data.MySqlClient.MySqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public uebersichtgemeindemeisterschaftTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::MySql.Data.MySqlClient.MySqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::MySql.Data.MySqlClient.MySqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::MySql.Data.MySqlClient.MySqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::MySql.Data.MySqlClient.MySqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::MySql.Data.MySqlClient.MySqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::MySql.Data.MySqlClient.MySqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "uebersichtgemeindemeisterschaft";
            tableMapping.ColumnMappings.Add("Verein", "Verein");
            tableMapping.ColumnMappings.Add("SchuetzeID", "SchuetzeID");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Vorname", "Vorname");
            tableMapping.ColumnMappings.Add("Klasse", "Klasse");
            tableMapping.ColumnMappings.Add("Datum", "Datum");
            tableMapping.ColumnMappings.Add("Gemeindemeister Luftgewehr", "Gemeindemeister Luftgewehr");
            tableMapping.ColumnMappings.Add("Gemeindemeister Luftpistole", "Gemeindemeister Luftpistole");
            tableMapping.ColumnMappings.Add("Gemeindemeister Luftgewehr Auflage", "Gemeindemeister Luftgewehr Auflage");
            tableMapping.ColumnMappings.Add("Gemeindemeister Luftpistole Auflage", "Gemeindemeister Luftpistole Auflage");
            tableMapping.ColumnMappings.Add("Preis Luftgewehr", "Preis Luftgewehr");
            tableMapping.ColumnMappings.Add("Preis Luftpistole", "Preis Luftpistole");
            tableMapping.ColumnMappings.Add("Preis Luftgewehr Auflage", "Preis Luftgewehr Auflage");
            tableMapping.ColumnMappings.Add("Preis Luftpistole Auflage", "Preis Luftpistole Auflage");
            tableMapping.ColumnMappings.Add("Buergermeisterpokal Luftgewehr", "Buergermeisterpokal Luftgewehr");
            tableMapping.ColumnMappings.Add("Buergermeisterpokal Luftpistole", "Buergermeisterpokal Luftpistole");
            tableMapping.ColumnMappings.Add("Buergermeisterpokal Luftgewehr Auflage", "Buergermeisterpokal Luftgewehr Auflage");
            tableMapping.ColumnMappings.Add("Buergermeisterpokal Luftpistole Auflage", "Buergermeisterpokal Luftpistole Auflage");
            tableMapping.ColumnMappings.Add("Gedaechtnispokal Luftgewehr", "Gedaechtnispokal Luftgewehr");
            tableMapping.ColumnMappings.Add("Gedaechtnispokal Luftpistole", "Gedaechtnispokal Luftpistole");
            tableMapping.ColumnMappings.Add("Gedaechtnispokal Luftgewehr Auflage", "Gedaechtnispokal Luftgewehr Auflage");
            tableMapping.ColumnMappings.Add("Gedaechtnispokal Luftpistole Auflage", "Gedaechtnispokal Luftpistole Auflage");
            tableMapping.ColumnMappings.Add("schiessjahrId", "schiessjahrId");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::MySql.Data.MySqlClient.MySqlConnection();
            this._connection.ConnectionString = global::schiessbuch.Properties.Settings.Default.VereinsheimSiusclubConnectionString1;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::MySql.Data.MySqlClient.MySqlCommand[1];
            this._commandCollection[0] = new global::MySql.Data.MySqlClient.MySqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT `Verein`, `SchuetzeID`, `Name`, `Vorname`, `Klasse`, `Datum`, `Gemeindemeister Luftgewehr`, `Gemeindemeister Luftpistole`, `Gemeindemeister Luftgewehr Auflage`, `Gemeindemeister Luftpistole Auflage`, `Preis Luftgewehr`, `Preis Luftpistole`, `Preis Luftgewehr Auflage`, `Preis Luftpistole Auflage`, `Buergermeisterpokal Luftgewehr`, `Buergermeisterpokal Luftpistole`, `Buergermeisterpokal Luftgewehr Auflage`, `Buergermeisterpokal Luftpistole Auflage`, `Gedaechtnispokal Luftgewehr`, `Gedaechtnispokal Luftpistole`, `Gedaechtnispokal Luftgewehr Auflage`, `Gedaechtnispokal Luftpistole Auflage`, `schiessjahrId` FROM `siusclub`.`uebersichtgemeindemeisterschaft`";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(siusclubDataSet1.uebersichtgemeindemeisterschaftDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual siusclubDataSet1.uebersichtgemeindemeisterschaftDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            siusclubDataSet1.uebersichtgemeindemeisterschaftDataTable dataTable = new siusclubDataSet1.uebersichtgemeindemeisterschaftDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(siusclubDataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(siusclubDataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(siusclubDataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(siusclubDataSet1 dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager enthält keine Verbindungsinformationen. Legen Sie jede TableA" +
                        "dapterManager TableAdapter-Eigenschaft auf eine gültige TableAdapter-Instanz fes" +
                        "t.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("Die Transaktion kann nicht gestartet werden. Die aktuelle Datenverbindung unterst" +
                        "ützt keine Transaktionen, oder der aktuelle Zustand lässt den Start der Transakt" +
                        "ion nicht zu.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591